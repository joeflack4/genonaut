"""Add tag models and user favorite tags

Revision ID: 3a7d7f5eafca
Revises: 07164a90d25d
Create Date: 2025-10-11 23:20:35.638178

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from genonaut.db.schema import JSONColumn


# revision identifiers, used by Alembic.
revision: str = '3a7d7f5eafca'
down_revision: Union[str, Sequence[str], None] = '07164a90d25d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tags',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('tag_metadata', JSONColumn(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_tags_created_at_desc', 'tags', [sa.literal_column('created_at DESC')], unique=False)
    op.create_index('idx_tags_name', 'tags', ['name'], unique=False)
    op.create_index(op.f('ix_tags_name'), 'tags', ['name'], unique=True)
    op.create_table('tag_parents',
    sa.Column('tag_id', sa.UUID(), nullable=False),
    sa.Column('parent_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['parent_id'], ['tags.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('tag_id', 'parent_id')
    )
    op.create_index('idx_tag_parents_parent', 'tag_parents', ['parent_id'], unique=False)
    op.create_index('idx_tag_parents_tag', 'tag_parents', ['tag_id'], unique=False)
    op.create_table('tag_ratings',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('tag_id', sa.UUID(), nullable=False),
    sa.Column('rating', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'tag_id', name='uq_user_tag_rating')
    )
    op.create_index('idx_tag_ratings_tag_rating', 'tag_ratings', ['tag_id', sa.literal_column('rating DESC')], unique=False)
    op.create_index('idx_tag_ratings_user_created', 'tag_ratings', ['user_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('ix_tag_ratings_tag_id'), 'tag_ratings', ['tag_id'], unique=False)
    op.create_index(op.f('ix_tag_ratings_user_id'), 'tag_ratings', ['user_id'], unique=False)

    # Drop constraints only if they exist (conditional for compatibility with different DB states)
    bind = op.get_bind()
    inspector = sa.inspect(bind)

    checkpoints_constraints = [c['name'] for c in inspector.get_unique_constraints('models_checkpoints')]
    if 'uq_models_checkpoints_path' in checkpoints_constraints:
        op.drop_constraint(op.f('uq_models_checkpoints_path'), 'models_checkpoints', type_='unique')

    loras_constraints = [c['name'] for c in inspector.get_unique_constraints('models_loras')]
    if 'uq_models_loras_path' in loras_constraints:
        op.drop_constraint(op.f('uq_models_loras_path'), 'models_loras', type_='unique')

    op.add_column('users', sa.Column('favorite_tag_ids', JSONColumn(), nullable=True))
    op.create_index('idx_users_favorite_tags_gin', 'users', ['favorite_tag_ids'], unique=False, postgresql_using='gin')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_users_favorite_tags_gin', table_name='users', postgresql_using='gin')
    op.drop_column('users', 'favorite_tag_ids')

    # Create constraints only if they don't exist (conditional for compatibility)
    bind = op.get_bind()
    inspector = sa.inspect(bind)

    loras_constraints = [c['name'] for c in inspector.get_unique_constraints('models_loras')]
    if 'uq_models_loras_path' not in loras_constraints:
        op.create_unique_constraint(op.f('uq_models_loras_path'), 'models_loras', ['path'], postgresql_nulls_not_distinct=False)

    checkpoints_constraints = [c['name'] for c in inspector.get_unique_constraints('models_checkpoints')]
    if 'uq_models_checkpoints_path' not in checkpoints_constraints:
        op.create_unique_constraint(op.f('uq_models_checkpoints_path'), 'models_checkpoints', ['path'], postgresql_nulls_not_distinct=False)

    op.drop_index(op.f('ix_tag_ratings_user_id'), table_name='tag_ratings')
    op.drop_index(op.f('ix_tag_ratings_tag_id'), table_name='tag_ratings')
    op.drop_index('idx_tag_ratings_user_created', table_name='tag_ratings')
    op.drop_index('idx_tag_ratings_tag_rating', table_name='tag_ratings')
    op.drop_table('tag_ratings')
    op.drop_index('idx_tag_parents_tag', table_name='tag_parents')
    op.drop_index('idx_tag_parents_parent', table_name='tag_parents')
    op.drop_table('tag_parents')
    op.drop_index(op.f('ix_tags_name'), table_name='tags')
    op.drop_index('idx_tags_name', table_name='tags')
    op.drop_index('idx_tags_created_at_desc', table_name='tags')
    op.drop_table('tags')
    # ### end Alembic commands ###
