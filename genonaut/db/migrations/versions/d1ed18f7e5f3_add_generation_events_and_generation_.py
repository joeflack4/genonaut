"""add generation_events and generation_metrics_hourly tables

Revision ID: d1ed18f7e5f3
Revises: 564cc0b09f6c
Create Date: 2025-10-23 21:02:16.878439

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import JSONB


# revision identifiers, used by Alembic.
revision: str = 'd1ed18f7e5f3'
down_revision: Union[str, Sequence[str], None] = '564cc0b09f6c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Create generation_metrics_hourly table first (no foreign keys)
    op.create_table('generation_metrics_hourly',
    sa.Column('id', sa.BigInteger(), sa.Identity(always=False), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('total_requests', sa.Integer(), nullable=False),
    sa.Column('successful_generations', sa.Integer(), nullable=False),
    sa.Column('failed_generations', sa.Integer(), nullable=False),
    sa.Column('cancelled_generations', sa.Integer(), nullable=False),
    sa.Column('avg_duration_ms', sa.Integer(), nullable=True),
    sa.Column('p50_duration_ms', sa.Integer(), nullable=True),
    sa.Column('p95_duration_ms', sa.Integer(), nullable=True),
    sa.Column('p99_duration_ms', sa.Integer(), nullable=True),
    sa.Column('unique_users', sa.Integer(), nullable=True),
    sa.Column('avg_queue_length', sa.Float(), nullable=True),
    sa.Column('max_queue_length', sa.Integer(), nullable=True),
    sa.Column('total_images_generated', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('timestamp', name='uq_generation_metrics_hourly_timestamp')
    )
    op.create_index('idx_gen_metrics_timestamp', 'generation_metrics_hourly', [sa.literal_column('timestamp DESC')], unique=False)

    # Create generation_events table
    op.create_table('generation_events',
    sa.Column('id', sa.BigInteger(), sa.Identity(always=False), nullable=False),
    sa.Column('event_type', sa.String(length=20), nullable=False),
    sa.Column('generation_id', sa.UUID(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('generation_type', sa.String(length=20), nullable=True),
    sa.Column('duration_ms', sa.Integer(), nullable=True),
    sa.Column('success', sa.Boolean(), nullable=True),
    sa.Column('error_type', sa.Text(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('queue_wait_time_ms', sa.Integer(), nullable=True),
    sa.Column('generation_time_ms', sa.Integer(), nullable=True),
    sa.Column('model_checkpoint', sa.Text(), nullable=True),
    sa.Column('image_dimensions', JSONB(), nullable=True),
    sa.Column('batch_size', sa.Integer(), nullable=True),
    sa.Column('prompt_tokens', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    # Create indexes for generation_events
    op.create_index('idx_gen_events_timestamp', 'generation_events', [sa.literal_column('timestamp DESC')], unique=False)
    op.create_index('idx_gen_events_user_time', 'generation_events', ['user_id', sa.literal_column('timestamp DESC')], unique=False)
    op.create_index('idx_gen_events_generation_id', 'generation_events', ['generation_id'], unique=False)
    op.create_index('idx_gen_events_event_type', 'generation_events', ['event_type'], unique=False)
    # Partial indexes for specific query patterns
    op.execute("CREATE INDEX idx_gen_events_success ON generation_events(success) WHERE event_type = 'completion'")
    op.execute("CREATE INDEX idx_gen_events_error_type ON generation_events(error_type) WHERE error_type IS NOT NULL")
    op.create_index('idx_gen_events_model', 'generation_events', ['model_checkpoint', sa.literal_column('timestamp DESC')], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop generation_events table and indexes
    op.drop_index('idx_gen_events_model', table_name='generation_events')
    op.execute("DROP INDEX IF EXISTS idx_gen_events_error_type")
    op.execute("DROP INDEX IF EXISTS idx_gen_events_success")
    op.drop_index('idx_gen_events_event_type', table_name='generation_events')
    op.drop_index('idx_gen_events_generation_id', table_name='generation_events')
    op.drop_index('idx_gen_events_user_time', table_name='generation_events')
    op.drop_index('idx_gen_events_timestamp', table_name='generation_events')
    op.drop_table('generation_events')

    # Drop generation_metrics_hourly table and indexes
    op.drop_index('idx_gen_metrics_timestamp', table_name='generation_metrics_hourly')
    op.drop_table('generation_metrics_hourly')
    # ### end Alembic commands ###
