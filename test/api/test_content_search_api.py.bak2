"""API integration tests for enhanced content search functionality."""

import pytest
from uuid import UUID

from genonaut.db.schema import User, ContentItem, ContentItemAuto


@pytest.fixture
def test_user(db_session):
    """Create a test user for API tests."""
    user = User(
        username='test-user',
        email='test@example.com'
    )
    db_session.add(user)
    db_session.commit()
    db_session.refresh(user)
    return user


@pytest.fixture
def content_items(db_session, test_user):
    """Create test content items."""
    items = [
        ContentItem(
            creator_id=test_user.id,
            title="My cute cat playing",
            prompt="A photo of a cute cat playing with a ball",
            quality_score=0.8
        ),
        ContentItem(
            creator_id=test_user.id,
            title="Beautiful sunset",
            prompt="A beautiful sunset over the ocean",
            quality_score=0.9
        ),
        ContentItem(
            creator_id=test_user.id,
            title="Cat in the garden",
            prompt="A cat sitting in a beautiful garden",
            quality_score=0.7
        ),
        ContentItem(
            creator_id=test_user.id,
            title="Dog playing fetch",
            prompt="A happy dog playing fetch in the park",
            quality_score=0.85
        ),
        ContentItem(
            creator_id=test_user.id,
            title="The black cat mystery",
            prompt="A mysterious black cat in the moonlight",
            quality_score=0.75
        ),
    ]

    for item in items:
        db_session.add(item)

    db_session.commit()
    return items


@pytest.fixture
def user_id_str(test_user):
    """Get user ID as string."""
    return str(test_user.id)


class TestSimpleSearch:
    """Test simple word-based search via API."""

    def test_search_single_word(self, api_client, user_id_str, content_items):
        """Test searching for a single word."""
        response = client.get(
            f"/api/v1/content/unified?user_id={user_id_str}&search_term=cat"
        )

        assert response.status_code == 200
        data = response.json()
        assert "items" in data
        # Should find items with "cat" in title or prompt
        assert len(data["items"]) >= 3

    def test_search_multiple_words(self, api_client, user_id_str, content_items):
        """Test search with multiple words (AND logic)."""
        response = client.get(
            f"/api/v1/content/unified?user_id={user_id_str}&search_term=cat+playing"
        )

        assert response.status_code == 200
        data = response.json()
        # Should find "My cute cat playing" (has both words)
        assert len(data["items"]) >= 1

    def test_search_case_insensitive(self, api_client, user_id_str, content_items):
        """Test that search is case insensitive."""
        response1 = client.get(
            f"/api/v1/content/unified?user_id={user_id_str}&search_term=CAT"
        )
        response2 = client.get(
            f"/api/v1/content/unified?user_id={user_id_str}&search_term=cat"
        )

        assert response1.status_code == 200
        assert response2.status_code == 200
        # Should return same number of results
        assert len(response1.json()["items"]) == len(response2.json()["items"])

    def test_search_no_results(self, api_client, user_id_str, content_items):
        """Test search with no matching results."""
        response = client.get(
            f"/api/v1/content/unified?user_id={user_id_str}&search_term=nonexistent"
        )

        assert response.status_code == 200
        data = response.json()
        assert len(data["items"]) == 0
        assert data["pagination"]["total_count"] == 0


class TestQuotedPhraseSearch:
    """Test quoted phrase search via API."""

    def test_search_exact_phrase(self, api_client, user_id_str, content_items):
        """Test searching for an exact phrase in quotes."""
        # URL encode the quoted phrase
        response = client.get(
            f'/api/v1/content/unified?user_id={user_id_str}&search_term="black+cat"'
        )

        assert response.status_code == 200
        data = response.json()
        # Should find "The black cat mystery"
        assert len(data["items"]) >= 1
        found_item = next(
            (item for item in data["items"] if "black cat" in item["title"].lower()),
            None
        )
        assert found_item is not None

    def test_search_phrase_no_match_reversed(self, api_client, user_id_str, content_items):
        """Test that reversed phrase doesn't match."""
        response = client.get(
            f'/api/v1/content/unified?user_id={user_id_str}&search_term="cat+black"'
        )

        assert response.status_code == 200
        data = response.json()
        # Should find nothing (exact phrase required)
        assert len(data["items"]) == 0

    def test_search_multiple_phrases(self, api_client, user_id_str, db_session, test_user):
        """Test search with multiple quoted phrases."""
        # Add item with both phrases
        item = ContentItem(
            creator_id=test_user.id,
            title="Test item",
            prompt="A cute cat and a happy dog playing together",
            quality_score=0.8
        )
        db_session.add(item)
        db_session.commit()

        response = client.get(
            f'/api/v1/content/unified?user_id={user_id_str}&search_term="cute+cat"+"happy+dog"'
        )

        assert response.status_code == 200
        data = response.json()
        assert len(data["items"]) >= 1


class TestMixedSearch:
    """Test mixed quoted and unquoted search."""

    def test_mixed_phrase_and_word(self, api_client, user_id_str, content_items):
        """Test combining quoted phrase with unquoted word."""
        response = client.get(
            f'/api/v1/content/unified?user_id={user_id_str}&search_term="black+cat"+mystery'
        )

        assert response.status_code == 200
        data = response.json()
        # Should find "The black cat mystery"
        assert len(data["items"]) >= 1
        found = any(
            "black cat" in item["title"].lower() and "mystery" in item["title"].lower()
            for item in data["items"]
        )
        assert found

    def test_mixed_order_independent(self, api_client, user_id_str, content_items):
        """Test that order of quoted/unquoted doesn't matter."""
        response1 = client.get(
            f'/api/v1/content/unified?user_id={user_id_str}&search_term="black+cat"+mystery'
        )
        response2 = client.get(
            f'/api/v1/content/unified?user_id={user_id_str}&search_term=mystery+"black+cat"'
        )

        assert response1.status_code == 200
        assert response2.status_code == 200
        # Should return same results
        assert len(response1.json()["items"]) == len(response2.json()["items"])


class TestEmptySearch:
    """Test empty and edge case searches."""

    def test_empty_search_returns_all(self, api_client, user_id_str, content_items):
        """Test that empty search returns all items."""
        response = client.get(
            f"/api/v1/content/unified?user_id={user_id_str}&search_term="
        )

        assert response.status_code == 200
        data = response.json()
        # Should return all items
        assert len(data["items"]) >= len(content_items)

    def test_no_search_param_returns_all(self, api_client, user_id_str, content_items):
        """Test that omitting search param returns all items."""
        response = client.get(
            f"/api/v1/content/unified?user_id={user_id_str}"
        )

        assert response.status_code == 200
        data = response.json()
        assert len(data["items"]) >= len(content_items)

    def test_whitespace_only_search(self, api_client, user_id_str, content_items):
        """Test search with only whitespace."""
        response = client.get(
            f"/api/v1/content/unified?user_id={user_id_str}&search_term=++++"
        )

        assert response.status_code == 200
        data = response.json()
        # Should treat as empty and return all
        assert len(data["items"]) >= len(content_items)


class TestSpecialCharacters:
    """Test search with special characters."""

    def test_search_with_ampersand(self, api_client, user_id_str, db_session, test_user):
        """Test search with ampersand character."""
        item = ContentItem(
            creator_id=test_user.id,
            title="Cats & Dogs",
            prompt="A photo of cats and dogs together",
            quality_score=0.8
        )
        db_session.add(item)
        db_session.commit()

        response = client.get(
            f"/api/v1/content/unified?user_id={user_id_str}&search_term=Cats"
        )

        assert response.status_code == 200
        data = response.json()
        assert len(data["items"]) >= 1

    def test_search_with_percent_sign(self, api_client, user_id_str, db_session, test_user):
        """Test search handles URL encoding correctly."""
        item = ContentItem(
            creator_id=test_user.id,
            title="100% Awesome",
            prompt="A photo that is 100% awesome",
            quality_score=0.8
        )
        db_session.add(item)
        db_session.commit()

        # Search for "Awesome"
        response = client.get(
            f"/api/v1/content/unified?user_id={user_id_str}&search_term=Awesome"
        )

        assert response.status_code == 200
        data = response.json()
        assert len(data["items"]) >= 1

    def test_search_with_unicode(self, api_client, user_id_str, db_session, test_user):
        """Test search with unicode characters."""
        item = ContentItem(
            creator_id=test_user.id,
            title="Café scene",
            prompt="A beautiful café in Paris",
            quality_score=0.8
        )
        db_session.add(item)
        db_session.commit()

        response = client.get(
            f"/api/v1/content/unified?user_id={user_id_str}&search_term=Café"
        )

        assert response.status_code == 200
        # Should handle unicode properly
        data = response.json()
        assert len(data["items"]) >= 1


class TestSearchWithPagination:
    """Test that search works correctly with pagination."""

    def test_search_paginated(self, api_client, user_id_str, db_session, test_user):
        """Test search results are properly paginated."""
        # Add many items with "test" keyword
        for i in range(25):
            item = ContentItem(
                creator_id=test_user.id,
                title=f"Test item {i}",
                prompt=f"Test prompt {i}",
                quality_score=0.8
            )
            db_session.add(item)
        db_session.commit()

        response = client.get(
            f"/api/v1/content/unified?user_id={user_id_str}&search_term=test&page=1&page_size=10"
        )

        assert response.status_code == 200
        data = response.json()
        assert len(data["items"]) == 10
        assert data["pagination"]["total_count"] == 25
        assert data["pagination"]["total_pages"] == 3
        assert data["pagination"]["has_next"] is True

    def test_search_second_page(self, api_client, user_id_str, db_session, test_user):
        """Test retrieving second page of search results."""
        for i in range(25):
            item = ContentItem(
                creator_id=test_user.id,
                title=f"Test item {i}",
                prompt=f"Test prompt {i}",
                quality_score=0.8
            )
            db_session.add(item)
        db_session.commit()

        response = client.get(
            f"/api/v1/content/unified?user_id={user_id_str}&search_term=test&page=2&page_size=10"
        )

        assert response.status_code == 200
        data = response.json()
        assert len(data["items"]) == 10
        assert data["pagination"]["page"] == 2


class TestSearchAcrossContentTypes:
    """Test search across regular and auto-generated content."""

    def test_search_includes_auto_content(self, api_client, user_id_str, db_session, test_user):
        """Test that auto-generated content is included in search."""
        # Add regular item
        regular_item = ContentItem(
            creator_id=test_user.id,
            title="Regular cat photo",
            prompt="A cat photo",
            quality_score=0.8
        )
        # Add auto item
        auto_item = ContentItemAuto(
            creator_id=test_user.id,
            title="Auto cat portrait",
            prompt="An auto-generated cat portrait",
            quality_score=0.8
        )
        db_session.add(regular_item)
        db_session.add(auto_item)
        db_session.commit()

        response = client.get(
            f"/api/v1/content/unified?user_id={user_id_str}&search_term=cat"
        )

        assert response.status_code == 200
        data = response.json()
        # Should include both types
        assert len(data["items"]) >= 2


class TestSearchFilters:
    """Test that search works with other filter parameters."""

    def test_search_with_content_type_filter(self, api_client, user_id_str, db_session, test_user):
        """Test search combined with content_type filter."""
        regular_item = ContentItem(
            creator_id=test_user.id,
            title="Regular test",
            prompt="Test prompt",
            quality_score=0.8
        )
        auto_item = ContentItemAuto(
            creator_id=test_user.id,
            title="Auto test",
            prompt="Test prompt",
            quality_score=0.8
        )
        db_session.add(regular_item)
        db_session.add(auto_item)
        db_session.commit()

        # Search only in regular content
        response = client.get(
            f"/api/v1/content/unified?user_id={user_id_str}&search_term=test&content_types=regular"
        )

        assert response.status_code == 200
        data = response.json()
        # Should only include regular items
        content_types = [item.get("content_type") for item in data["items"]]
        assert all(ct == "regular" for ct in content_types if ct)

    def test_search_with_tag_filter(self, api_client, user_id_str, db_session, test_user):
        """Test search combined with tag filter."""
        from genonaut.db.schema import Tag, ContentItemTag

        # Create a tag
        tag = Tag(name="nature", description="Nature photos")
        db_session.add(tag)
        db_session.commit()

        # Create items
        item1 = ContentItem(
            creator_id=test_user.id,
            title="Cat in nature",
            prompt="A cat in a forest",
            quality_score=0.8
        )
        item2 = ContentItem(
            creator_id=test_user.id,
            title="Cat indoors",
            prompt="A cat inside a house",
            quality_score=0.8
        )
        db_session.add(item1)
        db_session.add(item2)
        db_session.commit()

        # Tag only item1
        content_tag = ContentItemTag(
            content_item_id=item1.id,
            tag_id=tag.id
        )
        db_session.add(content_tag)
        db_session.commit()

        # Search with tag filter
        response = client.get(
            f"/api/v1/content/unified?user_id={user_id_str}&search_term=cat&tag_ids={tag.id}"
        )

        assert response.status_code == 200
        data = response.json()
        # Should only return item1
        assert len(data["items"]) == 1
        assert "nature" in data["items"][0]["title"].lower()


class TestSearchPerformance:
    """Test search performance with larger datasets."""

    def test_search_with_many_items(self, api_client, user_id_str, db_session, test_user):
        """Test search performance with many content items."""
        # Add 100 items
        for i in range(100):
            item = ContentItem(
                creator_id=test_user.id,
                title=f"Item {i}",
                prompt=f"Description {i}",
                quality_score=0.8
            )
            db_session.add(item)

        # Add some items with search term
        for i in range(10):
            item = ContentItem(
                creator_id=test_user.id,
                title=f"Special cat item {i}",
                prompt=f"A special cat {i}",
                quality_score=0.8
            )
            db_session.add(item)

        db_session.commit()

        import time
        start = time.time()

        response = client.get(
            f"/api/v1/content/unified?user_id={user_id_str}&search_term=cat"
        )

        elapsed = time.time() - start

        assert response.status_code == 200
        data = response.json()
        assert len(data["items"]) >= 10

        # Search should complete reasonably fast (under 1 second)
        assert elapsed < 1.0, f"Search took {elapsed}s, should be < 1s"
